Code : Prim's Algorithm
Send Feedback
Given an undirected, connected and weighted graph G(V, E) with V number of vertices (which are numbered from 0 to V-1) and E number of edges.
Find and print the Minimum Spanning Tree (MST) using Prim's algorithm.
For printing MST follow the steps -
1. In one line, print an edge which is part of MST in the format - 
v1 v2 w
where, v1 and v2 are the vertices of the edge which is included in MST and whose weight is w. And v1  <= v2 i.e. print the smaller vertex first while printing an edge.
2. Print V-1 edges in above format in different lines.
Note : Order of different edges doesn't matter.
Input Format :
Line 1: Two Integers V and E (separated by space)
Next E lines : Three integers ei, ej and wi, denoting that there exists an edge between vertex ei and vertex ej with weight wi (separated by space)
Output Format :
Print the MST, as described in the task.
Constraints :
2 <= V, E <= 10^5
1 <= Wi <= 10^5
Time Limit: 1 sec
Sample Input 1 :
4 4
0 1 3
0 3 5
1 2 1
2 3 8
Sample Output 1 :
0 1 3
1 2 1
0 3 5
------------------------------

import java.util.Scanner;

public class Solution {

	public static void main(String[] args) {
		int v;
        int e;
        Scanner sc= new Scanner(System.in);
        v=sc.nextInt();
        e=sc.nextInt();
        int [][] m=new int[v][v];
        for (int i = 0; i < e; i++) {
            int v1=sc.nextInt();
            int v2=sc.nextInt();
            int v3=sc.nextInt();
            m[v1][v2]=v3;
            m[v2][v1]=v3;
        }

        findMST(m);
	}
    
    public static void findMST(int [][] m){
        int parent[] = new int[m.length];
        parent[0]=-1;
        boolean [] visited = new boolean[m.length];
        int [] weight = new int[m.length];
        for (int i = 0; i < weight.length; i++) {
            if(i==0)
                weight[i]=0;
            else
                weight[i]=Integer.MAX_VALUE;
        }

        int c=0;
        while (c!=m.length){
            int min_wt=Integer.MAX_VALUE;
            int min_i=-1;
            for (int i = 0; i < weight.length; i++) {
                if(min_wt>weight[i] && !visited[i]){
                    min_i=i;
                    min_wt=weight[i];
                }
            }

            visited[min_i]=true;
            for (int i = 0; i < m.length; i++) {
                if(m[min_i][i]!=0 && !visited[i]){
                    if(weight[i]>m[min_i][i]){
                        weight[i]=m[min_i][i];
                        parent[i]=min_i;
                    }
                }
            }
            c++;
        }

        for (int i = 1; i < parent.length; i++) {
            if(i<= parent[i])
                System.out.println(i+" "+parent[i]+" "+weight[i]);
            else
                System.out.println(parent[i]+" "+i+" "+weight[i]);
        }
    }
}
