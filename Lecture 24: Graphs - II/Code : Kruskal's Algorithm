Code : Kruskal's Algorithm
Send Feedback
Given an undirected, connected and weighted graph G(V, E) with V number of vertices (which are numbered from 0 to V-1) and E number of edges.
Find and print the Minimum Spanning Tree (MST) using Kruskal's algorithm.
For printing MST follow the steps -
1. In one line, print an edge which is part of MST in the format - 
v1 v2 w
where, v1 and v2 are the vertices of the edge which is included in MST and whose weight is w. And v1  <= v2 i.e. print the smaller vertex first while printing an edge.
2. Print V-1 edges in above format in different lines.
Note : Order of different edges doesn't matter.
Input Format :
Line 1: Two Integers V and E (separated by space)
Next E lines : Three integers ei, ej and wi, denoting that there exists an edge between vertex ei and vertex ej with weight wi (separated by space)
Output Format :
Print the MST, as described in the task.
Constraints :
2 <= V, E <= 10^5
Time Limit: 1 sec
Sample Input 1 :
4 4
0 1 3
0 3 5
1 2 1
2 3 8
Sample Output 1 :
1 2 1
0 1 3
0 3 5


Code Pair

Java (SE 1.8)
1234567891011121314151617181920212223242526272829303132
import java.util.*; class Edge implements Comparable<Edge>{    int v1;    int v2;    int weight;     public Edge(int v1,int v2,int weight){        this.v1=v1;        this.v2=v2;        this.weight=weight;    }     @Override    public int compareTo(Edge o) {        return this.weight-o.weight;    }}  public class Solution {     public static void main(String[] args) {        Scanner sc = new Scanner(System.in);        // int V = sc.nextInt();        // int E = sc.nextInt();         /* Write Your Code Here         * Complete the Rest of the Program         * You have to take input and print the output yourself         */        
import java.util.*;

class Edge implements Comparable<Edge>{
    int v1;
    int v2;
    int weight;

    public Edge(int v1,int v2,int weight){
        this.v1=v1;
        this.v2=v2;


CUSTOM INPUT


SUBMIT SOLUTION


PREVIOUS


NEXT
-----------------------------------

import java.util.*;

class Edge implements Comparable<Edge>{
    int v1;
    int v2;
    int weight;

    public Edge(int v1,int v2,int weight){
        this.v1=v1;
        this.v2=v2;
        this.weight=weight;
    }

    @Override
    public int compareTo(Edge o) {
        return this.weight-o.weight;
    }
}


public class Solution {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		// int V = sc.nextInt();
		// int E = sc.nextInt();

		/* Write Your Code Here
		 * Complete the Rest of the Program
		 * You have to take input and print the output yourself
		 */
        
        int v;
        int e;
        v=sc.nextInt();
        e=sc.nextInt();
        Edge [] arr = new Edge[e];
        for (int i = 0; i < e; i++) {
            int v1=sc.nextInt();
            int v2=sc.nextInt();
            int w=sc.nextInt();
            Edge e1= new Edge(v1,v2,w);
            arr[i]=e1;
        }

        Arrays.sort(arr);
        printMST(arr,v);
	}
    
    public static int findParent(int [] parent,int child){
        
        if(child==parent[child])
            return child;
        
        return findParent(parent,parent[child]);
    }
    
    public static void printMST(Edge [] arr,int v){

        Edge [] output = new Edge[v-1];
        int [] parent = new int[v];
        for (int i = 0; i < parent.length; i++) {
            parent[i]=i;
        }

        int c=0;
        int i=0;
        while (c!=v-1){
            Edge e1=arr[i];
            int p1=findParent(parent,e1.v1);
            int p2=findParent(parent,e1.v2);

            if(p1!=p2){
                output[c]=e1;
                c++;
                parent[p1]= p2;
            }
            i++;
        }

        for (int j = 0; j < output.length; j++) {
            if(output[j].v1<output[j].v2)
            System.out.println(output[j].v1+" "+output[j].v2+" "+output[j].weight);
            else
                System.out.println(output[j].v2+" "+output[j].v1+" "+output[j].weight);
        }
    }
}
