Code : Minimum Cost Path
Send Feedback
An integer matrix of size (M x N) has been given. Find out the minimum cost to reach from the cell (0, 0) to (M - 1, N - 1).
From a cell (i, j), you can move in three directions:
1. ((i + 1),  j) which is, "down"
2. (i, (j + 1)) which is, "to the right"
3. ((i+1), (j+1)) which is, "to the diagonal"
The cost of a path is defined as the sum of each cell's values through which the route passes.
 Input format :
The first line of the test case contains two integer values, 'M' and 'N', separated by a single space. They represent the 'rows' and 'columns' respectively, for the two-dimensional array/list.

The second line onwards, the next 'M' lines or rows represent the ith row values.

Each of the ith row constitutes 'N' column values separated by a single space.
Output format :
Print the minimum cost to reach the destination.
Constraints :
1 <= M <= 10 ^ 2
1 <= N <=  10 ^ 2

Time Limit: 1 sec
Sample Input 1 :
3 4
3 4 1 2
2 1 8 9
4 7 8 1
Sample Output 1 :
13
Sample Input 2 :
3 4
10 6 9 0
-23 8 9 90
-200 0 89 200
Sample Output 2 :
76
Sample Input 3 :
5 6
9 6 0 12 90 1
2 7 8 5 78 6
1 6 0 5 10 -4 
9 6 2 -10 7 4
10 -2 0 5 5 7
Sample Output 3 :
18
------------------------------------


public class Solution {

	public static int minCostPath(int[][] input) {
		// //Your code goes here
		// int [][] storage=new int[input.length][input[0].length];
		// for (int i = 0; i < storage.length; i++) {
		// for (int j = 0; j < input[0].length; j++) {
		// storage[i][j]=-1;
		// }
		// }
		// return minCostPathM(input,0,0,storage);
        
        int m=input.length;
        int n=input[0].length;
        int [][] storage=new int[m][n];
        storage[m-1][n-1]=input[m-1][n-1];
        for (int i = m-1; i >=0 ; i--) {
            for (int j = n-1; j >=0 ; j--) {
                if(i==m-1 && j==n-1)
                    continue;
                int v1=Integer.MAX_VALUE;
                int v2=Integer.MAX_VALUE;
                int v3=Integer.MAX_VALUE;
                if(i+1<m &&j<n)
                    v1=storage[i+1][j];
                if(i+1<m && j+1<n)
                    v2=storage[i+1][j+1];
                if(i<m && j+1<n)
                    v3=storage[i][j+1];
                storage[i][j]=input[i][j]+Math.min(v1,Math.min(v2,v3));
            }
        }
        return storage[0][0];
	}
    
    public static int minCostPath(int[][] input,int r,int c) {
        //Your code goes here
        if(r==input.length-1 && c==input[0].length-1){
            return input[r][c];
        }
        int v1=Integer.MAX_VALUE;
        int v2=Integer.MAX_VALUE;
        int v3=Integer.MAX_VALUE;
        if(r+1<input.length)
            v1=minCostPath(input,r+1,c);
        if(r+1<input.length && c+1<input[0].length)
            v2=minCostPath(input,r+1,c+1);
        if(c+1<input[0].length)
            v3=minCostPath(input,r,c+1);

        return input[r][c]+Math.min(v1,Math.min(v2,v3));
    }
    
    public static int minCostPathM(int[][] input,int r,int c,int [][] storage) {
        //Your code goes here
        if(r==input.length-1 && c==input[0].length-1){
            storage[r][c]=input[r][c];
            return storage[r][c];
        }

        if(storage[r][c]!=-1)
            return storage[r][c];

        int v1=Integer.MAX_VALUE;
        int v2=Integer.MAX_VALUE;
        int v3=Integer.MAX_VALUE;
        if(r+1<input.length)
            v1=minCostPathM(input,r+1,c,storage);
        if(r+1<input.length && c+1<input[0].length)
            v2=minCostPathM(input,r+1,c+1,storage);
        if(c+1<input[0].length)
            v3=minCostPathM(input,r,c+1,storage);

        storage[r][c]=input[r][c]+Math.min(v1,Math.min(v2,v3));
        return storage[r][c];
    }
}
