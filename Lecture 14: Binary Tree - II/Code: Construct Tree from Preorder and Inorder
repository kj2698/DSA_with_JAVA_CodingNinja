Code: Construct Tree from Preorder and Inorder
Send Feedback
For a given preorder and inorder traversal of a Binary Tree of type integer stored in an array/list, create the binary tree using the given two arrays/lists. You just need to construct the tree and return the root.
Note:
Assume that the Binary Tree contains only unique elements. 
Input Format:
The first line of input contains an integer N denoting the size of the list/array. It can also be said that N is the total number of nodes the binary tree would have.

The second line of input contains N integers, all separated by a single space. It represents the preorder-traversal of the binary tree.

The third line of input contains N integers, all separated by a single space. It represents the inorder-traversal of the binary tree.
Output Format:
The given input tree will be printed in a level order fashion where each level will be printed on a new line. 
Elements on every level will be printed in a linear fashion. A single space will separate them.
Constraints:
1 <= N <= 10^4
Where N is the total number of nodes in the binary tree.

Time Limit: 1 sec
Sample Input 1:
7
1 2 4 5 3 6 7 
4 2 5 1 6 3 7 
Sample Output 1:
1 
2 3 
4 5 6 7 
Sample Input 2:
6
5 6 2 3 9 10 
2 6 3 9 5 10 
Sample Output 2:
5 
6 10 
2 3 
9 
-----------------------------
/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/

public class Solution {

	public static BinaryTreeNode<Integer> buildTree(int[] preOrder, int[] inOrder) {
		//Your code goes here
        BinaryTreeNode<Integer> root=CombinePreIn(preOrder,inOrder,0,preOrder.length-1,0,inOrder.length-1);
        return root;
        
	}
    
    public static BinaryTreeNode<Integer> CombinePreIn(int [] pre,int [] in,int p1,int p2,int i1,int i2){

        if(i1>i2)
            return null;

        if(i1==i2){
            BinaryTreeNode<Integer> ans= new BinaryTreeNode<>(in[i1]);
            return ans;
        }

        int root=pre[p1];
        int i=i1;
        int count=0;
        while (i<=i2){
            if(in[i]==root)
                break;
            i++;
            count++;
        }
        int inorderEnd=i-1;
        int ls=i1;
        int le=inorderEnd;
        int rs=i+1;
        int re=i2;
        int pls1=p1+1;
        int ple1=p1+count;
        int prs1=ple1+1;
        int pre1=p2;
        BinaryTreeNode<Integer> left=CombinePreIn(pre,in,pls1,ple1,ls,le);
        BinaryTreeNode<Integer> right=CombinePreIn(pre,in,prs1,pre1,rs,re);
        BinaryTreeNode<Integer> root1=new BinaryTreeNode<>(root);
        root1.left=left;
        root1.right=right;
        return root1;
    }

}
