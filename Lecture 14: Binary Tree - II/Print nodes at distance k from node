Print nodes at distance k from node
Send Feedback
You are given a Binary Tree of type integer, a target node, and an integer value K.
Print the data of all nodes that have a distance K from the target node. The order in which they would be printed will not matter.
Example:
For a given input tree(refer to the image below):
1. Target Node: 5
2. K = 2
alt txt

Starting from the target node 5, the nodes at distance K are 7 4 and 1.
Input Format:
The first line of input will contain the node data, all separated by a single space. Since -1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data.

The second line of input contains two integers separated by a single space, representing the value of the target node and K, respectively.
Output Format:
All the node data at distance K from the target node will be printed on a new line.

The order in which the data is printed doesn't matter.
Constraints:
1 <= N <= 10^5
Where N is the total number of nodes in the binary tree.

Time Limit: 1 sec
Sample Input 1:
5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1
3 1
Sample Output 1:
9
6
Sample Input 2:
1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1
3 3
Sample Output 2:
4
5
--------------------------------

import java.util.*;
class Pair1{
    BinaryTreeNode<Integer> node;
    char ch;

    Pair1(BinaryTreeNode<Integer> node,char ch){
        this.node=node;
        this.ch=ch;
    }
}
/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/

public class Solution {

	public static void nodesAtDistanceK(BinaryTreeNode<Integer> root, int node, int k) {
	    //Your code goes here
        
        ArrayList<Pair1> l1 = nodePath(root,node,'r');
        for (int i = 0; i < l1.size(); i++) {
            printAtLevel(l1.get(i).node,k-i,l1.get(i).ch);
        }
	}
    
    public static void printAtLevel(BinaryTreeNode<Integer> root,int height,char direction){

        if(height<0 || root==null)
            return;

        if(height==0 && root!=null){
            System.out.println(root.data);
            return;
        }

        if(direction!='L')
            printAtLevel(root.left,height-1,'z');
        if(direction!='R')
            printAtLevel(root.right,height-1,'z');
    }
    
    public static ArrayList<Pair1> nodePath(BinaryTreeNode<Integer> root, int x, char direction){
        if(root==null){
            ArrayList<Pair1> l1 = new ArrayList<>();
            return l1;
        }

        if(root.data==x){
            Pair1 o1=new Pair1(root,'z');
            ArrayList<Pair1> l1 = new ArrayList<>();
            l1.add(o1);
            return l1;
        }

        ArrayList<Pair1> l2 = nodePath(root.left,x,'L');
        ArrayList<Pair1> l3 = nodePath(root.right,x,'R');
        if(!l3.isEmpty()){
            Pair1 p1=new Pair1(root,'R');
            l3.add(p1);
        }else if(!l2.isEmpty()){
            Pair1 p1=new Pair1(root,'L');
            l2.add(p1);
        }
        l2.addAll(l3);
        return l2;
    }

}
