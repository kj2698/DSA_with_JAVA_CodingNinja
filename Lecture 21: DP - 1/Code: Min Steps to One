Code: Min Steps to One
Send Feedback
Given a positive integer 'n', find and return the minimum number of steps that 'n' has to take to get reduced to 1. You can perform any one of the following 3 steps:
1.) Subtract 1 from it. (n = n - ­1) ,
2.) If its divisible by 2, divide by 2.( if n % 2 == 0, then n = n / 2 ) ,
3.) If its divisible by 3, divide by 3. (if n % 3 == 0, then n = n / 3 ).  
Write brute-force recursive solution for this.
Input format :
The first and the only line of input contains an integer value, 'n'.
Output format :
Print the minimum number of steps.
Constraints :
1 <= n <= 200

Time Limit: 1 sec
Sample Input 1 :
4
Sample Output 1 :
2 
Explanation of Sample Output 1 :
For n = 4
Step 1 :  n = 4 / 2  = 2
Step 2 : n = 2 / 2  =  1 
Sample Input 2 :
7
Sample Output 2 :
3
Explanation of Sample Output 2 :
For n = 7
Step 1 :  n = 7 ­- 1 = 6
Step 2 : n = 6  / 3 = 2 
Step 3 : n = 2 / 2 = 1  
----------------------------------------------------------------

public class Solution {

	public static int countMinStepsToOne(int n) {
		//Your code goes here
        
        int [] count=new int[n+1];
        for (int i = 2; i <=n ; i++) {
            count[i]=-1;
        }
        return countStep(n,count)-1;
	}

    public static int countStep(int n,int [] count){

        if (n==1){
            return 1;
        }

        if(count[n]!=-1){
            return count[n]+1;
        }

        int c1=Integer.MAX_VALUE;
        int c2=Integer.MAX_VALUE;
        if(n%3==0)
            c1=countStep(n/3,count);
        if(n%2==0)
            c2=countStep(n/2,count);
        int c3=countStep(n-1,count);
        int mincount=Math.min(c1,Math.min(c2,c3));
        count[n]=mincount;
        // System.out.println(n+"-> "+mincount);
        return mincount+1;
    }
}
