Next Number
Send Feedback
Given a large number represented in the form of a linked list. Write code to increment the number by 1 in-place(i.e. without using extra space).
Note: You don't need to print the elements, just update the elements and return the head of updated LL.
Input Constraints:
1 <= Length of Linked List <=10^6.
Input format :
Line 1 : Linked list elements (separated by space and terminated by -1)
Output Format :
Line 1: Updated linked list elements 
Sample Input 1 :
3 9 2 5 -1
Sample Output 1 :
3 9 2 6
Sample Input 2 :
9 9 9 -1
Sample Output 1 :
1 0 0 0 
--------------------------
/*************** 
 * Following is the Node class already written 
class LinkedListNode<T> {
	T data;
	LinkedListNode<T> next;

	public LinkedListNode(T data) {
		this.data = data;
	}
}
 ***************/

public class Solution {

    
    public static LinkedListNode<Integer> rev(LinkedListNode<Integer> head){

        LinkedListNode<Integer> prev=null;
        LinkedListNode<Integer> temp = head;
        while(temp!=null){
            LinkedListNode<Integer> nextNode=(temp.next!=null)?temp.next:null;
            temp.next=prev;
            prev=temp;
            temp=nextNode;
        }


        return prev;
    }

	public static LinkedListNode<Integer> nextLargeNumber(LinkedListNode<Integer> head) {
   
        LinkedListNode<Integer> temp=rev(head);
        head=temp;
        LinkedListNode<Integer> sLast=null;
        int v=1;
        while (temp!=null && v!=0){
            int n=temp.data+v;
            int r=n%10;
            int c=n/10;
            temp.data=r;
            sLast=temp;
            temp=temp.next;
            v=c;
        }
        if(v==1){
            LinkedListNode<Integer> n1= new LinkedListNode<>(v);
            sLast.next=n1;
        }

        return rev(head);
	}


}
