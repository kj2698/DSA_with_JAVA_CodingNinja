Merge K sorted arrays
Send Feedback
Given k different arrays, which are sorted individually (in ascending order). You need to merge all the given arrays such that output array should be sorted (in ascending order).
Hint : Use Heaps.
Input Format:
The first line of input contains an integer, that denotes value of k.
The following lines of input represent k sorted arrays. Each sorted array uses two lines of input. The first line contains an integer, that denotes the size of the array. The following line contains elements of the array.
Output Format:
The first and only line of output contains space separated elements of the merged and sorted array, as described in the task.
Constraints:
0 <= k <= 1000
0 <= n1, n2 <= 10000
Time Limit: 1 second
Sample Input 1:
4
3
1 5 9
2
45 90
5
2 6 78 100 234
1
0
Sample Output 1:
0 1 2 5 6 9 45 78 90 100 234
------------------------------------------

import java.util.*;

class elementInfo{
    int element;
    int array;
    int index;

    public elementInfo(int element,int array,int index){
        this.element=element;
        this.array=array;
        this.index=index;
    }
}

class ksortedComparator implements Comparator<elementInfo>{


    @Override
    public int compare(elementInfo o1, elementInfo o2) {
        if(o1.element<o2.element){
            return -1;
        }else if(o1.element>o2.element){
            return 1;
        }else {
            return 0;
        }
    }
}

public class Solution {

	public static ArrayList<Integer> mergeKSortedArrays(ArrayList<ArrayList<Integer>> arr) {

		/* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Return output and don't print it.
	 	 * Taking input and printing output is handled automatically.
        */

        
        ArrayList<Integer> ans = new ArrayList<>();
        ksortedComparator c1=new ksortedComparator();
        PriorityQueue<elementInfo> pq=new PriorityQueue<>(c1);
        for (int i = 0; i < arr.size(); i++) {
            elementInfo e1=new elementInfo(arr.get(i).get(0),i,0);
            pq.add(e1);
        }
        
        while (!pq.isEmpty()){
            elementInfo e1=pq.remove();
            ans.add(e1.element);
            int a=e1.array;
            int i=e1.index;
            if(i+1<arr.get(a).size()){
                elementInfo e2=new elementInfo(arr.get(a).get(i+1),a,i+1);
                pq.add(e2);
            }
        }
        
        return ans;
	}

}
