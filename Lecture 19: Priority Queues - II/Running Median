Running Median
Send Feedback
You are given a stream of 'N' integers. For every 'i-th' integer added to the running list of integers, print the resulting median.
Print only the integer part of the median.
Input Format :
The first line of input contains an integer 'N', denoting the number of integers in the stream.

The second line of input contains 'N' integers separated by a single space.
Output Format :
Print the running median for every integer added to the running list in one line (space-separated).
Input Constraints
0 <= N <= 10 ^ 5
1 <= ARR[i] <= 10 ^ 5

Time Limit: 1 sec
Sample Input 1 :
6
6 2 1 3 7 5
Sample Output 1 :
6 4 2 2 3 4
Explanation of Sample Output 1 :
S = {6}, median = 6
S = {6, 2} -> {2, 6}, median = 4
S = {6, 2, 1} -> {1, 2, 6}, median = 2
S = {6, 2, 1, 3} -> {1, 2, 3, 6}, median = 2
S = {6, 2, 1, 3, 7} -> {1, 2, 3, 6, 7}, median = 3
S = {6, 2, 1, 3, 7, 5} -> {1, 2, 3, 5, 6, 7}, median = 4
Sample Input 2 :
5
5 4 3 2 1
Sample Output 2 :
5 4 4 3 3
---------------------------

import java.util.*;
import java.util.Comparator;
import java.util.PriorityQueue;

public class Solution {

	public static void findMedian(int arr[])  {
        
        
        /* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Return output and don't print it.
	 	 * Taking input and printing output is handled automatically.
        */
    
        PriorityQueue<Integer> pq1 = new PriorityQueue<>(Collections.reverseOrder());
        PriorityQueue<Integer> pq2 = new PriorityQueue<>();

        for(int element:arr){
            if(pq1.isEmpty() && pq2.isEmpty()){
                pq1.add(element);
            }else if(element<=pq1.peek()){
                pq1.add(element);
                if(pq1.size()-pq2.size() >1){
                    pq2.add(pq1.remove());
                }
                
            }else {
                pq2.add(element);
                if(pq2.size()-pq1.size()>1){
                    pq1.add(pq2.remove());
                }
            }
            
            if(pq1.size()>pq2.size()){
                System.out.print(pq1.peek()+" ");
            }else if(pq2.size()>pq1.size()){
                System.out.print(pq2.peek()+" ");
            }else {
                System.out.print((pq1.peek()+pq2.peek())/2+" ");
            }
        }
        
    }


}
