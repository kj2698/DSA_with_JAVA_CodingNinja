Connecting Dots
Send Feedback
Gary has a board of size NxM. Each cell in the board is a coloured dot. There exist only 26 colours denoted by uppercase Latin characters (i.e. A,B,...,Z). Now Gary is getting bored and wants to play a game. The key of this game is to find a cycle that contain dots of same colour. Formally, we call a sequence of dots d1, d2, ..., dk a cycle if and only if it meets the following condition:
1. These k dots are different: if i ≠ j then di is different from dj.
2. k is at least 4.
3. All dots belong to the same colour.
4. For all 1 ≤ i ≤ k - 1: di and di + 1 are adjacent. Also, dk and d1 should also be adjacent. Cells x and y are called adjacent if they share an edge.
Since Gary is colour blind, he wants your help. Your task is to determine if there exists a cycle on the board.
Input Format :
The first line of input contains two space separated integers N and M, where N is number of rows and M is the number of columns of the board. 
Each of the following N lines contain M characters. Please note that characters are not space separated. Each character is an uppercase Latin letter.
Output Format :
Print true if there is a cycle in the board, else print false.
Constraints :
2 <= N <= 1000
2 <= M <= 1000
Time Limit: 1 second
Sample Input 1:
3 4
AAAA
ABCA
AAAA
Sample Output 1:
true
------------------------------------------

import java.util.*;

public class Solution {

    static int [] x={-1,0,1,0};
    static int [] y={0,1,0,-1};
    int solve(String[] arr , int n1, int m1)
	{
		/* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Return output and don't print it.
	 	 * Taking input and printing output is handled automatically.
        */
        
        int r=arr.length;
        int c=arr[0].length();
        char [][] m=new char[r][c];
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                m[i][j]=arr[i].charAt(j);
            }
        }

        boolean [][] visited=new boolean[r][c];
        boolean v=false;
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
               if(!visited[i][j]){
                   v=v || isCycle(m,-1,-1,i,j,visited);
               }
            }
        }
            
        return (v==true)?1:0;
	}
	
	public static boolean isCycle(char [][] m,int p_x,int p_y,int x1,int y1,boolean [][] visited){
        

        visited[x1][y1] = true;
        boolean ans=false;
        for (int i = 0; i < Solution.x.length; i++) {
            int n_x = x1 + x[i];
            int n_y = y1 + y[i];
            if (n_x >= 0 && n_x < m.length && n_y >= 0 && n_y < m[0].length) {
                if (m[n_x][n_y] == m[x1][y1] && !visited[n_x][n_y]) {
                    // go ahead
                    
                    ans = ans || isCycle(m, x1, y1, n_x, n_y, visited);

                } else if (m[n_x][n_y] == m[x1][y1] && visited[n_x][n_y]) {
                    if (p_x == n_x && p_y == n_y)
                        continue;
                    return true;
                }
            }
        }
        return ans;
    }
}
