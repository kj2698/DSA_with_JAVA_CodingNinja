Second Largest Element In Tree
Send Feedback
Given a generic tree, find and return the node with second largest value in given tree. Return NULL if no node with required value is present.
Input format :
Elements in level order form separated by space (as per done in class). Order is - 

Root_data, n (No_Of_Child_Of_Root), n children, and so on for every element 
Output format:
Second Largest node data
Sample Input 1 :
10 3 20 30 40 2 40 50 0 0 0 0 
Sample Output 1 :
40
-------------------------------


class Pair{
    TreeNode<Integer> l=null;
    TreeNode<Integer> sl=null;
}

public class Solution {

/*	TreeNode structure 
 * 
 * class TreeNode<T> {
		T data;
		ArrayList<TreeNode<T>> children;

		TreeNode(T data){
			this.data = data;
			children = new ArrayList<TreeNode<T>>();
		}
	}*/
	
		
	
	public static TreeNode<Integer> findSecondLargest(TreeNode<Integer> root){

        if(root==null || root.children.size()==0)
            return null;

        Pair p1 = new Pair();
        TreeNode<Integer> r1=helper1(root,p1);
        if(r1.data.equals(p1.l.data))
            return p1.sl;
        else if(p1.sl==null && r1.data<p1.l.data)
            p1.sl=r1;
        else if(r1.data>p1.l.data){
            p1.sl=p1.l;
            p1.l=r1;
        }else if(r1.data>p1.sl.data){
            p1.sl=r1;
        }
        return p1.sl;
        
	}
	
    
    public static TreeNode<Integer> helper1(TreeNode<Integer> root, Pair p1){

        for (int i = 0; i < root.children.size(); i++) {

            TreeNode<Integer> ans1=helper1(root.children.get(i),p1);
            if(p1.l==null)
                p1.l=ans1;
            else if(ans1.data<p1.l.data && (p1.sl==null || p1.sl.data<ans1.data))
                p1.sl=ans1;
            else if(ans1.data>p1.l.data){
                p1.sl=p1.l;
                p1.l=ans1;
            }
        }

        return root;
    }
	
}
