Structurally identical
Send Feedback
Given two Generic trees, return true if they are structurally identical i.e. they are made of nodes with the same values arranged in the same way.
Input format :

Line 1 : Tree 1 elements in level order form separated by space (as per done in class). Order is -

Root_data, n (No_Of_Child_Of_Root), n children, and so on for every element

Line 2 : Tree 2 elements in level order form separated by space (as per done in class). Order is -

Root_data, n (No_Of_Child_Of_Root), n children, and so on for every element

Output format : true or false

Sample Input 1 :
10 3 20 30 40 2 40 50 0 0 0 0 
10 3 20 30 40 2 40 50 0 0 0 0
Sample Output 1 :
true
Sample Input 2 :
10 3 20 30 40 2 40 50 0 0 0 0 
10 3 2 30 40 2 40 50 0 0 0 0
Sample Output 2:
false
---------------------------

import java.util.*;
public class Solution {

/*	TreeNode structure 
 * 
 * class TreeNode<T> {
		T data;
		ArrayList<TreeNode<T>> children;

		TreeNode(T data){
			this.data = data;
			children = new ArrayList<TreeNode<T>>();
		}
	}*/
	
	public static boolean checkIdentical(TreeNode<Integer> root1, TreeNode<Integer> root2){

		// Write your code here
        
        if(root1.data!=root2.data || root1.children.size()!=root2.children.size())
            return false;
        Queue<TreeNode<Integer>> q1=new LinkedList<>();
        Queue<TreeNode<Integer>> q2=new LinkedList<>();
        q1.add(root1);
        q2.add(root2);
        while(!q1.isEmpty() && !q2.isEmpty()){
            
            TreeNode<Integer> n1=q1.poll();
            TreeNode<Integer> n2=q2.poll();
            if(n1.data!=n2.data)
                return false;
            int s1=n1.children.size();
            int s2=n2.children.size();
            if(s1==s2){
                for(int i=0;i<s1;i++){
                    q1.add(n1.children.get(i));
                    q2.add(n2.children.get(i));
                }
            }else
                return false;
        }
        
        return true;
	}
	
}
