Palindrome Pair
Send Feedback
Given 'n' number of words, you need to find if there exist any two words which can be joined to make a palindrome or any word, which itself is a palindrome.
The function should return either true or false. You don't have to print anything.
Input Format :
The first line of the test case contains an integer value denoting 'n'.

The following contains 'n' number of words each separated by a single space.
Output Format :
The first and only line of output contains true if the conditions described in the task are met and false otherwise.
Constraints:
0 <= n <= 10^5
Time Limit: 1 sec
Sample Input 1 :
4
abc def ghi cba
Sample Output 1 :
true
Explanation of Sample Input 1:
"abc" and "cba" forms a palindrome
Sample Input 2 :
2
abc def
Sample Output 2 :
false
Explanation of Sample Input 2:
Neither their exists a pair which forms a palindrome, nor any of the words is a palindrome in itself. Hence, the output is 'false.'
-----------------------------


import java.util.ArrayList;

class TrieNode1 {
	char data;
    boolean isTerminating;
    TrieNode1 children[];
    int childCount;
    boolean isPalindrome;

    public TrieNode1(char data,boolean isPalindrome) {
        this.data = data;
        isTerminating = false;
        children = new TrieNode1[26];
        childCount = 0;
        this.isPalindrome=isPalindrome;
	}
}

public class Trie {

	private TrieNode1 root;
	public int count;

	public Trie() {
		root = new TrieNode1('\0',false);
	}

	private void add(TrieNode1 root, String word){
        if(word.length() == 0){
            root.isTerminating = true;
            return;
        }

        int childIndex = word.charAt(0) - 'a';
        TrieNode1 child = root.children[childIndex];

        if(child == null) {
            boolean isp=palindrome(word);
            child = new TrieNode1(word.charAt(0),isp);
            root.children[childIndex] = child;
            root.childCount++;
        }

        add(child, word.substring(1));
    }

	public void add(String word){
		add(root, word);
	}

	private boolean search(TrieNode1 root, String word) {
        if(word.length() == 0) {
            if(root.isTerminating){
                return true;
            }else{
                for (int i = 0; i < 26; i++) {
                    if(root.children[i]!=null){
                        if(root.children[i].isPalindrome)
                            return true;
                    }
                }
            }

            return false;
        }

        int childIndex=word.charAt(0) - 'a';
        TrieNode1 child=root.children[childIndex];

        if(child == null) {
            if(root.childCount!=0 && !root.isTerminating)
                return false;
            return palindrome(word);
        }

        return search(child,word.substring(1));

    }

	public boolean search(String word) {
		return search(root,word);
	}

	private void print(TrieNode1 root, String word) {
		if (root == null) {
			return;
		}
		
		if (root.isTerminating) {
			System.out.println(word);
		}
		
		for (TrieNode1 child : root.children) {
			if (child == null) {
				continue;
			}
			String fwd = word + child.data;
			print(child, fwd);
		}
	}
	
	public void print() {
		print(this.root, "");
	}



    public boolean palindrome(String s){

        int i=0;
        int j=s.length()-1;
        while (i<j){
            if(s.charAt(i)!=s.charAt(j))
                return false;
            i++;
            j--;
        }
        return true;
    }


	/*..................... Palindrome Pair................... */


	public boolean isPalindromePair(ArrayList<String> words) {
		//Your code goes here
        
        for(String s:words){
            String s1="";
            for (int i = s.length()-1; i >=0 ; i--) {
                s1+=s.charAt(i);
            }
            this.add(s1);
        }

        for(String s:words){
            boolean v=this.search(s);
            if(v)
                return true;
        }
        return false;
	}


	
} 
