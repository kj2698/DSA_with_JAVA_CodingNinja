Check redundant brackets
Send Feedback
For a given expression in the form of a string, find if there exist any redundant brackets or not. It is given that the expression contains only rounded brackets or parenthesis and the input expression will always be balanced.
A pair of the bracket is said to be redundant when a sub-expression is surrounded by unnecessary or needless brackets.
Example:
Expression: (a+b)+c
Since there are no needless brackets, hence, the output must be 'false'.

Expression: ((a+b))
The expression can be reduced to (a+b). Hence the expression has redundant brackets and the output will be 'true'.
Note:
You will not get a partial score for this problem. You will get marks only if all the test cases are passed.
Input Format :
The first and the only line of input contains a string expression, without any spaces in between.
Output Format :
The first and the only line of output will print either 'true' or 'false'(without the quotes) denoting whether the input expression contains redundant brackets or not.
Note:
You are not required to print the expected result. It has already been taken care of.
Constraints:
0 <= N <= 10^6
Where N is the length of the expression.

Time Limit: 1 second
Sample Input 1:
a+(b)+c 
Sample Output 1:
true
Explanation:
The expression can be reduced to a+b+c. Hence, the brackets are redundant.
Sample Input 2:
(a+b)
Sample Output 2:
false
-------------------------------------------------
import java.util.*;
class StackwithLL<T> {

    private Node<T> head;
    private int size;

    private class Node<T>{
        T data;
        Node<T> next;

        public Node(T n){
            this.data=n;
            this.next=null;
        }
    }

    public T getTop(){
        
        return head.data;
    }

    public int getSize(){

        return size;
    }

    public boolean isEmpty(){

        return size==0;
    }

    public void push(T element){

        Node<T> n1 = new Node<>(element);
        n1.next=head;
        head=n1;
        size++;
    }

    public T pop(){
        T val= head.data;
        head=head.next;
        size--;
        return val;
    }
}



public class Solution {

	public static boolean checkRedundantBrackets(String expression) {
		//Your code goes here
       // Approach 1 (Not so Optimal)
        // StackwithLL<Character> o1 = new StackwithLL<>();
        // String s1=expression;
        // for (int i = 0; i < s1.length(); i++) {
        //     char ch = s1.charAt(i);
        //     if(ch=='('){
        //         o1.push(ch);
        //     }else if(ch==')'){
        //         if(o1.getTop()=='(' || o1.getTop()==')')
        //             return true;
        //         while(o1.getTop()!='('){
        //             o1.pop();
        //         }
        //         o1.pop();
        //     }else if(ch<'a' || ch>'z'){
        //         o1.push(ch);
        //     }
        // }
        // return false;
// Approach -2 (Optimal)
        Stack<Character> stack=new Stack<>();
        for(int i=0;i<expression.length();i++){
            if(expression.charAt(i)!=')')
                stack.push(expression.charAt(i));
            else{
                
                int c=0;
                while(stack.peek()!='('){
                    stack.pop();
                    c++;
                }
                stack.pop();
                if(c<2)
                    return true;
            }
        }

        return false;
	}
}
