Bubble Sort (Iterative) LinkedList
Send Feedback
Given a singly linked list of integers, sort it using 'Bubble Sort.'
Note :
No need to print the list, it has already been taken care. Only return the new head to the list.
Input format :
The first and the only line of each test case or query contains the elements of the singly linked list separated by a single space.
Remember/Consider :
While specifying the list elements for input, -1 indicates the end of the singly linked list and hence, would never be a list element
Output format :
For each test case/query, print the elements of the sorted singly linked list.

Output for every test case will be printed in a seperate line.
Constraints :
0 <= M <= 10^3
Where M is the size of the singly linked list.

Time Limit: 1sec
Sample Input 1 :
10 9 8 7 6 5 4 3 -1
Sample Output 1 :
 3 4 5 6 7 8 9 10 
 Sample Input 2 :
10 -5 9 90 5 67 1 89 -1
Sample Output 2 :
-5 1 5 9 10 67 89 90 
------------------------------------------
/*

	Following is the Node class already written for the Linked List

	class LinkedListNode<T> {
    	T data;
    	LinkedListNode<T> next;
    
    	public LinkedListNode(T data) {
        	this.data = data;
    	}
	}

*/

public class Solution {

	public static LinkedListNode<Integer> bubbleSort(LinkedListNode<Integer> head) {
		//Your code goes here
        
        if(head==null || head.next==null)
            return head;
        
        LinkedListNode<Integer> i=head;
        LinkedListNode<Integer> j=head.next;
        int m=0;
        int n=0;
        while(i.next!=null){
            j=i.next;
            n=m+1;
           while(j!=null){
                if(i.data>j.data){
                    //swap
                    head=swapNodes(head,m,n);
                    LinkedListNode<Integer> c=j;
                    j=i;
                    i=c;
                }
                j=j.next;
                n++;
           }
        
            i=i.next;
            m++;
            
        }
        return head;
	}
    
    public static LinkedListNode<Integer> swapNodes(LinkedListNode<Integer> head, int i, int j) {
		//Your code goes here
        
        if(head==null || head.next==null)
            return head;
        
        if(i==j)
            return head;
        
        int i1=(i<j)?i:j;
        int j1=(i>j)?i:j;
        
        
        LinkedListNode<Integer> t1 = null;
        LinkedListNode<Integer> t2 = null;
        int m=0;
        if(i1!=0){
            t1=head;
            while(t1!=null && m<i-1){
                t1=t1.next;
                m++;
            }
        }
        m=0;
        if(j1!=0){
            t2=head;
            while(t2!=null && m<j-1){
                t2= t2.next;
                m++;
            }
        }
        
        if(i1==0 && j1>1){
            //swapping the head
            LinkedListNode<Integer> h1=head.next;
            LinkedListNode<Integer> c1=t2.next;
            head.next=c1.next;
            c1.next=h1;
            t2.next=head;
            head=c1;
        }else if(i1==0 && j1==1){
            //swapping head and the next Node
            LinkedListNode<Integer> c1=t2.next;
            t2.next=c1.next;
            c1.next=t2;
            head=c1;
        }else if(j-i==1){
            
            LinkedListNode<Integer> c1=t1.next;
            LinkedListNode<Integer> c2=t2.next;
            t1.next=c2;
            c1.next=c2.next;
            c2.next=c1;
        }else{
            LinkedListNode<Integer> c1=t1.next;
            LinkedListNode<Integer> c2=t2.next;
            LinkedListNode<Integer> n1=c1.next;
            c1.next=c2.next;
            t2.next=c1;
            c2.next=n1;
            t1.next=c2;
        }
        
        return head;
        
	}
}
