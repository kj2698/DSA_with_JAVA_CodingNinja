Code : BFS Traversal
Send Feedback
Given an undirected and disconnected graph G(V, E), print its BFS traversal.
Note:
1. Here you need to consider that you need to print BFS path starting from vertex 0 only. 
2. V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
3. E is the number of edges present in graph G.
4. Take graph input in the adjacency matrix.
5. Handle for Disconnected Graphs as well
Input Format :
The first line of input contains two integers, that denote the value of V and E.
Each of the following E lines contains space separated two integers, that denote that there exists an edge between vertex a and b.
Output Format :
Print the BFS Traversal, as described in the task.
Constraints :
0 <= V <= 1000
0 <= E <= (V * (V - 1)) / 2
0 <= a <= V - 1
0 <= b <= V - 1
Time Limit: 1 second
Sample Input 1:
4 4
0 1
0 3
1 2
2 3
Sample Output 1:
0 1 3 2
-----------------------------

import java.util.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

public class Solution {
    
    public static void printBFS(int [][] m){

        boolean [] visited= new boolean[m.length];
         Queue<Integer> q= new LinkedList<>();
         q.add(0);
         visited[0]=true;
         while (!q.isEmpty()){
             int sv=q.poll();
             System.out.print(sv+" ");
             for (int i = 0; i < m.length; i++) {
                 if(m[sv][i]==1 && !visited[i]) {
                     q.add(i);
                     visited[i]=true;
                 }
             }

             if(q.isEmpty())
                 for (int i = 0; i < m.length; i++) {
                     if(!visited[i]){
                         q.add(i);
                         visited[i]=true;
                         break;
                     }
                 }
         }
     }

	public static void main(String[] args) throws NumberFormatException, IOException {
        
        /* Write Your Code Here
		 * Complete the Rest of the Program
		 * You have to take input and print the output yourself
		 */
        
        int v;
        int e;
        
        Scanner sc= new Scanner(System.in);
        v=sc.nextInt();
        e=sc.nextInt();
        if(v>0){
        int [][] m=new int[v][v];
        for (int i = 0; i < e; i++) {
            int v1=sc.nextInt();
            int v2=sc.nextInt();
            m[v1][v2]=1;
            m[v2][v1]=1;
        }
        
        printBFS(m);
        }
	}

}
