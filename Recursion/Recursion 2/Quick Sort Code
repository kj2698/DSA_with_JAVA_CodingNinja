Quick Sort Code
Send Feedback
Sort an array A using Quick Sort.
Change in the input array itself. So no need to return or print anything.


Input format :
Line 1 : Integer n i.e. Array size
Line 2 : Array elements (separated by space)
Output format :
Array elements in increasing order (separated by space)
Constraints :
1 <= n <= 10^3
Sample Input 1 :
6 
2 6 8 5 4 3
Sample Output 1 :
2 3 4 5 6 8
Sample Input 2 :
5
1 5 2 7 3
Sample Output 2 :
1 2 3 5 7 
---------------------
/*
	To apply the method explained in the hint video, we have to add two more parameters in the function call. This can be done by calling a helper function from given function. The helper function can have three parameters: array, start index, end index.  
	
	Skeleton code to achieve this:
	public class Solution {
		public static void quickSort(int[] input, int startIndex, int endInedx) {
			// your code goes here
		}
	
		public static void quickSort(int[] input) {
			quickSort(input, 0, input.length - 1);
		}
	
	}
	
*/


public class Solution {
	
	public static void quickSort(int[] input) {
		/* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * No need to print or return the output.
		 * Taking input and printing output is handled automatically.
		 */
		quickSort(input,0,input.length-1);
	}
	
    private static void quickSort(int [] arr,int si,int ei){
        
        if(si>=ei)
            return;
        
        int pivotpos = partition(arr,si,ei);
        quickSort(arr,si,pivotpos-1);
        quickSort(arr,pivotpos+1,ei);
    }
    
    private static int partition(int [] arr,int si,int ei){
        // finding pivot
        int pivot=arr[si];
        int count=0;
        for(int i=si+1;i<=ei;i++){
            if(arr[i]<=pivot)
                count++;
        }
        //calc the position of pivot
        int pivotpos = si+count;
        //swap
        int temp = arr[si];
        arr[si]=arr[pivotpos];
        arr[pivotpos]=temp;
        //ensure all elements left of pivot are small.
        // all elements right of pivot are large.
        
        int i=si;
        int j=ei;
        while(i<pivotpos && j>pivotpos){
            
            if(arr[i]>pivot && arr[j]<=pivot){
                temp=arr[i];
                arr[i]=arr[j];
                arr[j]=temp;
                i++;
                j--;
            }
            
            if(arr[i]<=pivot)
                i++;
            if(arr[j]>pivot)
                j--;
        }
        return pivotpos;
    }
}
